## age: age of primary beneficiary
## sex: insurance contractor gender, female, male
## bmi: Body mass index, providing an understanding of body, weights that are relatively high or low relative to height, objective index of body weight (kg / m ^ 2) using the ratio of height to weight, ideally 18.5 to 24.9
## children: Number of children covered by health insurance / Number of dependents
## smoker: Smoking (Yes or No)
## region: the beneficiary's residential area in the US, northeast, southeast, southwest, northwest.
## charges: Individual medical costs billed by health insurance.
insuranceDT <- read.csv("insurance.csv")
View(insuranceDT)
# Step 3: Checking/analysing the structure of dataset
str(insuranceDT)
anyNA(insuranceDT)
# Step 4: EDA 1
## Obtaining the mean, intetquartile and outliers in Age, BMI basesd on Smoker, Region etc
par(mfrow=c(1,3))
boxplot(insuranceDT$age~insuranceDT$smoker, main="Boxplot of Age against Smoker",xlab ="Smoker", ylab = "Age")
boxplot(insuranceDT$age~insuranceDT$region, main="Boxplot of Age against Region",xlab ="Region", ylab = "Age")
boxplot(insuranceDT$age~insuranceDT$sex, main="Boxplot of Age against Smoker",xlab ="Sex", ylab = "Age")
boxplot(insuranceDT$bmi~insuranceDT$smoker, main="Boxplot of BMI against Smoker",xlab ="Smoker", ylab = "BMI" )
boxplot(insuranceDT$bmi~insuranceDT$region, main="Boxplot of BMI against Region",xlab ="Region",ylab = "BMI" )
boxplot(insuranceDT$bmi~insuranceDT$sex, main="Boxplot of BMI against Smoker",xlab ="Sex", ylab = "BMI" )
## Histogram Plot of continuous variables
hist(insuranceDT$age, main ="Distribution of Ages", ylab = "Frequency",xlab ="Age")
hist(insuranceDT$bmi,main ="Distribution of BMI", ylab = "Frequency",xlab ="BMI")
hist(insuranceDT$charges, main ="Distribution of Charges", ylab = "Frequency",xlab ="Charges")
## Density Plot of continuous variables
plot(density(insuranceDT$age), main="Density Plot: Age", ylab="Frequency", sub=paste("Skewness:", round(e1071::skewness(insuranceDT$age), 2)))  # density plot for 'age'
polygon(density(insuranceDT$age), col="red")
plot(density(insuranceDT$bmi), main="Density Plot: BMI", ylab="Frequency", sub=paste("Skewness:", round(e1071::skewness(insuranceDT$bmi), 2)))  # density plot for 'age'
polygon(density(insuranceDT$bmi), col="red")
plot(density(insuranceDT$charges), main="Density Plot: Charges", ylab="Frequency", sub=paste("Skewness:", round(e1071::skewness(insuranceDT$charges), 2)))  # density plot for 'charges'
polygon(density(insuranceDT$charges), col="red")
## Checking the proportions of sex, smoker and region in the dataset.
## Note: This is only done for two categorical variables
#library(gmodels)
CrossTable(insuranceDT$smoker, insuranceDT$sex, digits = 1,prop.r = F, prop.t = F, prop.chisq = F, chisq = T, dnn = c("Smoker", "Sex"))
CrossTable(insuranceDT$region, insuranceDT$sex, digits = 1,prop.r = F, prop.t = F, prop.chisq = F, chisq = T, dnn = c("Region", "Sex"))
CrossTable(insuranceDT$region, insuranceDT$smoker, digits = 1,prop.r = F, prop.t = F, prop.chisq = F, chisq = T, dnn = c("Region", "Smoker"))
# Converting the factor predictor variables to numeric
# Step 5: Data Preparation and Preprocessing
# Method 1: For converting from factor to numeric
#insuranceDT$sex_num <- as.character(insuranceDT$sex)
#insuranceDT$sex_num[insuranceDT$sex=="male"] <- "0"
#insuranceDT$sex_num[insuranceDT$sex=="female"] <- "1"
#insuranceDT$sex_num <- as.numeric(insuranceDT$sex_num)
# Method 2: For converting from factor to numeric
#insuranceDT$sex_num <- ifelse(insuranceDT$sex=="female", 1, 0) # make "male"=0 & "female"=1
#insuranceDT$smoker_num <- ifelse(insuranceDT$smoker=="yes", 1, 0)
# Method 3: For converting from factor to numeric
insuranceDT['sex'] <- sapply(insuranceDT[,"sex"], function(y){ifelse(y=="female",1,0)})
insuranceDT['smoker'] <- sapply(insuranceDT[,"smoker"], function(z){ ifelse(z=="yes",1,0)})
insuranceDT['region'] <-  sapply(insuranceDT[,'region'], function(x){
if(x=='southwest'){
x = 1
}else if(x=='southeast'){
x=2
}else if(x=='northwest'){
x=3
}else{
x=4
}
} )
head(insuranceDT)
#View(insuranceDT)
# str(insuranceDT)
# Exploratory Data Analysis2
par(mfrow=c(1,2))
plot(x=insuranceDT$age, y=insuranceDT$charges, main ="Scatter Plot of Charges Vs Age", ylab ="Charges", xlab = "Age", col="blue")
scatter.smooth(x=insuranceDT$age, y=insuranceDT$charges, main ="Scatter Plot of Charges Vs Age", ylab ="Charges", xlab = "Age", col="red")
boxplot(insuranceDT$age,ylab="Ages", main="Boxplot of Age", sub=paste("Outlier rows: ", boxplot.stats(insuranceDT$age)$out))
plot(density(insuranceDT$age), main="Density Plot: Age", ylab="Frequency", sub=paste("Skewness:", round(e1071::skewness(insuranceDT$age), 2)))  # density plot for 'age'
polygon(density(insuranceDT$age), col="red")
boxplot(insuranceDT$charges,ylab="Charges", main="Boxplot of Charges", sub=paste("Outlier rows: ", boxplot.stats(insuranceDT$charges)$out))
plot(density(insuranceDT$charges), main="Density Plot: Charges", ylab="Frequency", sub=paste("Skewness:", round(e1071::skewness(insuranceDT$charges), 2)))  # density plot for 'charges'
polygon(density(insuranceDT$charges), col="red")
plot(x=insuranceDT$smoker, y=insuranceDT$charges, main ="Scatter Plot of Charges Vs Smoker", ylab ="Charges", xlab = "Age", col="blue")
plot(x=insuranceDT$sex, y=insuranceDT$charges, main ="Scatter Plot of Charges Vs Smoker", ylab ="Charges", xlab = "Sex", col="red")
plot(x=insuranceDT$region, y=insuranceDT$charges, main ="Scatter Plot of Charges Vs Smoker", ylab ="Charges", xlab = "Region", col="#ff9933")
## From the correlation matrix plot below we can confirm that 'smoker' feature is positively correlated with charges so also is bmi, children and age. Region do not have effect on the charges.
#library(GGally)
ggcorr(insuranceDT)
## Data Splitting
insurance_index <- createDataPartition(insuranceDT$charges, p=0.8, list=FALSE)
train_insurance <- insuranceDT[insurance_index,]
test_insurance <- insuranceDT[-insurance_index,]
x_train <-  train_insurance[,c(1:6)]
y_train <- train_insurance[,c(7)]
x_test <- test_insurance[,c(1:6)]
y_test <- test_insurance["charges"]
#View(x_train)
#View(x_test)
#View(y_train)
#View(y_test)
# Checking number of rows and column
nrow(train_insurance)
nrow(test_insurance)
##View(test_insurance)
#Step 6: Model Fitting
insurance_model <- lm(charges~., data = train_insurance)
#insurance_model2 <- lm(charges~age+bmi+children+smoker,data = train_insurance)
summary(insurance_model)
#summary(insurance_model2)
#Step 7: Predictions from our Model
predict_insurance <- predict(insurance_model, x_test)
cor(predict_insurance, y_test)
predict_insurance2 <- predict(insurance_model, test_insurance)
cor(predict_insurance2,test_insurance$charges)
# Step 8: Comparing the Results
## The correlation accuracy of the model based on the test is 84.49% or 89.16%
actual_predicted <- data.frame(y_test, predict_insurance)
colnames(actual_predicted) <- c("Actual", "Predicted")
correlation_accuracy <- cor(actual_predicted)
correlation_accuracy
cat("\n","***** ######## ********************","\n")
actual_predicted2 <- data.frame(test_insurance$charges, predict_insurance2)
colnames(actual_predicted2) <- c("Actual", "Predicted")
correlation_accuracy2 <- cor(actual_predicted2)
correlation_accuracy2
# Step 9: Obtaining Error Metrics
#library(DMwR)
regr.eval(actual_predicted$Actual, actual_predicted$Predicted)
# Step 10: Scatter Plot of Predicted and Actual
plot(x=actual_predicted$Actual, y=actual_predicted$Predicted, xlab ="Actual Charges",ylab = "Predicted Charges", main ="Result of Predicted and Actual",col="blue",pch = 16, cex=1.5)
# Step 11 : Predicting new Customers Data with the model
# Predict charges for new customer : Name- Frank
newData <- data.frame(a=40, b= 1, c=45.50, d=4, e =1, f=3)
colnames(newData) <- colnames(x_test)
frank_Predict <- predict(insurance_model,newData)
cat("Medical Insurance cost of Frank is: ", frank_Predict)
data_function <- function(a, b, c,d,e,f){
testData <- data.frame(col1=c(a),col2=c(b),col3=c(c),col4=c(d),col5=c(e),col6=c(f))
colnames(testData) <- colnames(x_test)
return(testData)
}
# Predict charges for new customer : Name- James
newData2 <- data_function(40,1,45.50,4,1,3)
#newData2
james_Predict <- predict(insurance_model,newData2)
cat("Medical Insurance cost of James is: ", james_Predict)
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
# Predict charges for new customer : Name- James
newData2 <- data_function(40,1,45.50,4,1,3)
#newData2
james_Predict <- predict(insurance_model,newData2)
cat("Medical Insurance cost of James is: ", james_Predict)
# Predict charges for new customer : Name- James
newData2 <- data_function(40,1,45.50,4,1,3)
#newData2
james_Predict <- predict(insurance_model,newData2)
cat("Medical Insurance cost of James is: ", james_Predict)
# Predict charges for new customer : Name- James
newData2 <- data_function(40,1,45.50,4,1,3)
#newData2
james_Predict <- predict(insurance_model,newData2)
cat("Medical Insurance cost of James is: ", james_Predict)
# Predict charges for new customer : Name- James
newData2 <- data_function(40,1,50,4,1,3)
#newData2
james_Predict <- predict(insurance_model,newData2)
cat("Medical Insurance cost of James is: ", james_Predict)
rmarkdown::run("InsurrApp.Rmd")
# Predict charges for new customer : Name- James
newData2 <- data_function(40,1,50,4,1,3)
#newData2
james_Predict <- predict(insurance_model,newData2)
cat("Medical Insurance cost of James is: ", james_Predict)
# Predict charges for new customer : Name- James
newData2 <- data_function(40,1,50,4,1,3)
#newData2
james_Predict <- predict(insurance_model,newData2)
cat("Medical Insurance cost of James is: ", james_Predict)
rmarkdown::run("InsurrApp.Rmd")
# Predict charges for new customer : Name- James
newData2 <- data_function(40,1,50,4,0,3)
#newData2
james_Predict <- predict(insurance_model,newData2)
cat("Medical Insurance cost of James is: ", james_Predict)
# Predict charges for new customer : Name- James
newData2 <- data_function(40,1,50,4,0,3)
#newData2
james_Predict <- predict(insurance_model,newData2)
cat("Medical Insurance cost of James is: ", james_Predict)
rmarkdown::run("InsurrApp.Rmd")
# Predict charges for new customer : Name- James
#newData2 <- data_function(40,1,50,4,0,3)
newData2 <- data_function(1,1,1,0,0,1)
#newData2
james_Predict <- predict(insurance_model,newData2)
cat("Medical Insurance cost of James is: ", james_Predict)
summary(insuranceDT)
# Predict charges for new customer : Name- James
#newData2 <- data_function(40,1,50,4,0,3)
newData2 <- data_function(1,1,1,0,0,1)
#newData2
james_Predict <- predict(insurance_model,newData2)
cat("Medical Insurance cost of James is: ", james_Predict)
# Predict charges for new customer : Name- James
#newData2 <- data_function(40,1,50,4,0,3)
newData2 <- data_function(1,1,1,0,1,1)
#newData2
james_Predict <- predict(insurance_model,newData2)
cat("Medical Insurance cost of James is: ", james_Predict)
# Predict charges for new customer : Name- James
#newData2 <- data_function(40,1,50,4,0,3)
newData2 <- data_function(1,1,1,0,0,1)
#newData2
james_Predict <- predict(insurance_model,newData2)
cat("Medical Insurance cost of James is: ", james_Predict)
# Predict charges for new customer : Name- James
#newData2 <- data_function(40,1,50,4,0,3)
newData2 <- data_function(1,1,15,0,0,1)
#newData2
james_Predict <- predict(insurance_model,newData2)
cat("Medical Insurance cost of James is: ", james_Predict)
# Predict charges for new customer : Name- James
#newData2 <- data_function(40,1,50,4,0,3)
newData2 <- data_function(1,1,15.7,0,0,1)
#newData2
james_Predict <- predict(insurance_model,newData2)
cat("Medical Insurance cost of James is: ", james_Predict)
# Predict charges for new customer : Name- James
#newData2 <- data_function(40,1,50,4,0,3)
newData2 <- data_function(1,1,20,0,0,1)
#newData2
james_Predict <- predict(insurance_model,newData2)
cat("Medical Insurance cost of James is: ", james_Predict)
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
insuranceDT <- read.csv("insurance.csv")
View(insuranceDT)
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
?round
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
insuranceDT <- read.csv("insurance.csv")
View(insuranceDT)
str(insuranceDT)
anyNA(insuranceDT)
par(mfrow=c(1,3))
boxplot(insuranceDT$age~insuranceDT$smoker, main="Boxplot of Age against Smoker",xlab ="Smoker", ylab = "Age")
boxplot(insuranceDT$age~insuranceDT$region, main="Boxplot of Age against Region",xlab ="Region", ylab = "Age")
boxplot(insuranceDT$age~insuranceDT$sex, main="Boxplot of Age against Smoker",xlab ="Sex", ylab = "Age")
boxplot(insuranceDT$bmi~insuranceDT$smoker, main="Boxplot of BMI against Smoker",xlab ="Smoker", ylab = "BMI" )
boxplot(insuranceDT$bmi~insuranceDT$region, main="Boxplot of BMI against Region",xlab ="Region",ylab = "BMI" )
boxplot(insuranceDT$bmi~insuranceDT$sex, main="Boxplot of BMI against Smoker",xlab ="Sex", ylab = "BMI" )
# Histogram Plot of continuous variables
hist(insuranceDT$age, main ="Distribution of Ages", ylab = "Frequency",xlab ="Age")
hist(insuranceDT$bmi,main ="Distribution of BMI", ylab = "Frequency",xlab ="BMI")
hist(insuranceDT$charges, main ="Distribution of Charges", ylab = "Frequency",xlab ="Charges")
# Density Plot of continuous variables
plot(density(insuranceDT$age), main="Density Plot: Age", ylab="Frequency", sub=paste("Skewness:", round(e1071::skewness(insuranceDT$age), 2)))  # density plot for 'age'
polygon(density(insuranceDT$age), col="red")
plot(density(insuranceDT$bmi), main="Density Plot: BMI", ylab="Frequency", sub=paste("Skewness:", round(e1071::skewness(insuranceDT$bmi), 2)))  # density plot for 'age'
polygon(density(insuranceDT$bmi), col="red")
plot(density(insuranceDT$charges), main="Density Plot: Charges", ylab="Frequency", sub=paste("Skewness:", round(e1071::skewness(insuranceDT$charges), 2)))  # density plot for 'charges'
polygon(density(insuranceDT$charges), col="red")
rmarkdown::run("InsurrApp.Rmd")
#library(gmodels)
CrossTable(insuranceDT$smoker, insuranceDT$sex, digits = 1,prop.r = F, prop.t = F, prop.chisq = F, chisq = T, dnn = c("Smoker", "Sex"))
CrossTable(insuranceDT$region, insuranceDT$sex, digits = 1,prop.r = F, prop.t = F, prop.chisq = F, chisq = T, dnn = c("Region", "Sex"))
CrossTable(insuranceDT$region, insuranceDT$smoker, digits = 1,prop.r = F, prop.t = F, prop.chisq = F, chisq = T, dnn = c("Region", "Smoker"))
#library(gmodels)
CrossTable(insuranceDT$smoker, insuranceDT$sex, digits = 1,prop.r = F, prop.t = F, prop.chisq = F, chisq = T, dnn = c("Smoker", "Sex"))
CrossTable(insuranceDT$region, insuranceDT$sex, digits = 1,prop.r = F, prop.t = F, prop.chisq = F, chisq = T, dnn = c("Region", "Sex"))
CrossTable(insuranceDT$region, insuranceDT$smoker, digits = 1,prop.r = F, prop.t = F, prop.chisq = F, chisq = T, dnn = c("Region", "Smoker"))
# Density Plot of continuous variables
renderPlot({
par(mfrow=c(1,3))
plot(density(insuranceDT$age), main="Density Plot: Age", ylab="Frequency", sub=paste("Skewness:", round(skewness(insuranceDT$age), 2)))  # density plot for 'age'
polygon(density(insuranceDT$age), col="red")
plot(density(insuranceDT$bmi), main="Density Plot: BMI", ylab="Frequency", sub=paste("Skewness:", round(skewness(insuranceDT$bmi), 2)))  # density plot for 'age'
polygon(density(insuranceDT$bmi), col="orange")
plot(density(insuranceDT$charges), main="Density Plot: Charges", ylab="Frequency", sub=paste("Skewness:", round(skewness(insuranceDT$charges), 2)))  # density plot for 'charges'
polygon(density(insuranceDT$charges), col="red")
})
plot(x=insuranceDT$smoker, y=insuranceDT$charges, main ="Scatter Plot of Charges Vs Smoker", ylab ="Charges", xlab = "Age", col="blue")
plot(x=insuranceDT$sex, y=insuranceDT$charges, main ="Scatter Plot of Charges Vs Smoker", ylab ="Charges", xlab = "Sex", col="red")
plot(x=insuranceDT$region, y=insuranceDT$charges, main ="Scatter Plot of Charges Vs Smoker", ylab ="Charges", xlab = "Region", col="#ff9933")
par(mfrow=c(1,2))
plot(x=insuranceDT$age, y=insuranceDT$charges, main ="Scatter Plot of Charges Vs Age", ylab ="Charges", xlab = "Age", col="blue")
scatter.smooth(x=insuranceDT$age, y=insuranceDT$charges, main ="Scatter Plot of Charges Vs Age", ylab ="Charges", xlab = "Age", col="red")
boxplot(insuranceDT$age,ylab="Ages", main="Boxplot of Age", sub=paste("Outlier rows: ", boxplot.stats(insuranceDT$age)$out))
plot(density(insuranceDT$age), main="Density Plot: Age", ylab="Frequency", sub=paste("Skewness:", round(e1071::skewness(insuranceDT$age), 2)))  # density plot for 'age'
polygon(density(insuranceDT$age), col="red")
boxplot(insuranceDT$charges,ylab="Charges", main="Boxplot of Charges", sub=paste("Outlier rows: ", boxplot.stats(insuranceDT$charges)$out))
plot(density(insuranceDT$charges), main="Density Plot: Charges", ylab="Frequency", sub=paste("Skewness:", round(e1071::skewness(insuranceDT$charges), 2)))  # density plot for 'charges'
polygon(density(insuranceDT$charges), col="red")
rmarkdown::run("InsurrApp.Rmd")
insuranceDT <- read.csv("insurance.csv")
View(insuranceDT)
str(insuranceDT)
library(GGally)
library(gmodels)
library(caret)
library(DMwR)
insuranceDT <- read.csv("insurance.csv")
View(insuranceDT)
str(insuranceDT)
summary(insuranceDT)
anyNA(insuranceDT)
par(mfrow=c(1,3))
# Boxplot to check outliers in smoker status, sex and region based on age
boxplot(insuranceDT$age~insuranceDT$smoker, main="Boxplot of Age against Smoker",xlab ="Smoker", ylab = "Age")
boxplot(insuranceDT$age~insuranceDT$region, main="Boxplot of Age against Region",xlab ="Region", ylab = "Age")
boxplot(insuranceDT$age~insuranceDT$sex, main="Boxplot of Age against Smoker",xlab ="Sex", ylab = "Age")
# Boxplot to check outliers in smoker status, sex and region based on bmi
boxplot(insuranceDT$bmi~insuranceDT$smoker, main="Boxplot of BMI against Smoker",xlab ="Smoker", ylab = "BMI" )
boxplot(insuranceDT$bmi~insuranceDT$region, main="Boxplot of BMI against Region",xlab ="Region",ylab = "BMI" )
boxplot(insuranceDT$bmi~insuranceDT$sex, main="Boxplot of BMI against Smoker",xlab ="Sex", ylab = "BMI" )
# Histogram Plot of continuous variables
hist(insuranceDT$age, main ="Distribution of Ages", ylab = "Frequency",xlab ="Age")
hist(insuranceDT$bmi,main ="Distribution of BMI", ylab = "Frequency",xlab ="BMI")
hist(insuranceDT$charges, main ="Distribution of Charges", ylab = "Frequency",xlab ="Charges")
# Density Plot of continuous variables
plot(density(insuranceDT$age), main="Density Plot: Age", ylab="Frequency", sub=paste("Skewness:", round(e1071::skewness(insuranceDT$age), 2)))  # density plot for 'age'
polygon(density(insuranceDT$age), col="red")
plot(density(insuranceDT$bmi), main="Density Plot: BMI", ylab="Frequency", sub=paste("Skewness:", round(e1071::skewness(insuranceDT$bmi), 2)))  # density plot for 'age'
polygon(density(insuranceDT$bmi), col="red")
plot(density(insuranceDT$charges), main="Density Plot: Charges", ylab="Frequency", sub=paste("Skewness:", round(e1071::skewness(insuranceDT$charges), 2)))  # density plot for 'charges'
polygon(density(insuranceDT$charges), col="red")
#library(gmodels)
CrossTable(insuranceDT$smoker, insuranceDT$sex, digits = 1,prop.r = F, prop.t = F, prop.chisq = F, chisq = T, dnn = c("Smoker", "Sex"))
CrossTable(insuranceDT$region, insuranceDT$sex, digits = 1,prop.r = F, prop.t = F, prop.chisq = F, chisq = T, dnn = c("Region", "Sex"))
CrossTable(insuranceDT$region, insuranceDT$smoker, digits = 1,prop.r = F, prop.t = F, prop.chisq = F, chisq = T, dnn = c("Region", "Smoker"))
# Method1: For converting from factor to numeric
#insuranceDT$sex_num <- as.character(insuranceDT$sex)
#insuranceDT$sex_num[insuranceDT$sex=="male"] <- "0"
#insuranceDT$sex_num[insuranceDT$sex=="female"] <- "1"
#insuranceDT$sex_num <- as.numeric(insuranceDT$sex_num)
# Method 2: For converting from factor to numeric
#insuranceDT$sex_num <- ifelse(insuranceDT$sex=="female", 1, 0) # make "male"=0 & "female"=1
#insuranceDT$smoker_num <- ifelse(insuranceDT$smoker=="yes", 1, 0)
# Method 3: For converting from factor to numeric
insuranceDT['sex'] <- sapply(insuranceDT[,"sex"], function(y){ifelse(y=="female",1,0)})
insuranceDT['smoker'] <- sapply(insuranceDT[,"smoker"], function(z){ ifelse(z=="yes",1,0)})
insuranceDT['region'] <-  sapply(insuranceDT[,'region'], function(x){
if(x=='southwest'){
x = 1
}else if(x=='southeast'){
x=2
}else if(x=='northwest'){
x=3
}else{
x=4
}
} )
head(insuranceDT)
#View(insuranceDT)
# str(insuranceDT)
par(mfrow=c(1,2))
plot(x=insuranceDT$age, y=insuranceDT$charges, main ="Scatter Plot of Charges Vs Age", ylab ="Charges", xlab = "Age", col="blue")
scatter.smooth(x=insuranceDT$age, y=insuranceDT$charges, main ="Scatter Plot of Charges Vs Age", ylab ="Charges", xlab = "Age", col="red")
boxplot(insuranceDT$age,ylab="Ages", main="Boxplot of Age", sub=paste("Outlier rows: ", boxplot.stats(insuranceDT$age)$out))
plot(density(insuranceDT$age), main="Density Plot: Age", ylab="Frequency", sub=paste("Skewness:", round(e1071::skewness(insuranceDT$age), 2)))  # density plot for 'age'
polygon(density(insuranceDT$age), col="red")
boxplot(insuranceDT$charges,ylab="Charges", main="Boxplot of Charges", sub=paste("Outlier rows: ", boxplot.stats(insuranceDT$charges)$out))
plot(density(insuranceDT$charges), main="Density Plot: Charges", ylab="Frequency", sub=paste("Skewness:", round(e1071::skewness(insuranceDT$charges), 2)))  # density plot for 'charges'
polygon(density(insuranceDT$charges), col="red")
plot(x=insuranceDT$smoker, y=insuranceDT$charges, main ="Scatter Plot of Charges Vs Smoker", ylab ="Charges", xlab = "Age", col="blue")
plot(x=insuranceDT$sex, y=insuranceDT$charges, main ="Scatter Plot of Charges Vs Smoker", ylab ="Charges", xlab = "Sex", col="red")
plot(x=insuranceDT$region, y=insuranceDT$charges, main ="Scatter Plot of Charges Vs Smoker", ylab ="Charges", xlab = "Region", col="#ff9933")
#library(GGally)
ggcorr(insuranceDT)
set.seed(100)
insurance_index <- createDataPartition(insuranceDT$charges, p=0.8, list=FALSE)
train_insurance <- insuranceDT[insurance_index,]
test_insurance <- insuranceDT[-insurance_index,]
x_train <-  train_insurance[,c(1:6)]
y_train <- train_insurance[,c(7)]
x_test <- test_insurance[,c(1:6)]
y_test <- test_insurance["charges"]
#View(x_train)
#View(x_test)
#View(y_train)
#View(y_test)
# Checking number of rows and column
nrow(train_insurance)
nrow(test_insurance)
##View(test_insurance)
set.seed(100)
insurance_model <- lm(charges~., data = train_insurance)
#insurance_model2 <- lm(charges~age+bmi+children+smoker,data = train_insurance)
summary(insurance_model)
#summary(insurance_model2)
predict_insurance <- predict(insurance_model, x_test)
cor(predict_insurance, y_test)
predict_insurance2 <- predict(insurance_model, test_insurance)
cor(predict_insurance2,test_insurance$charges)
actual_predicted <- data.frame(y_test, predict_insurance)
colnames(actual_predicted) <- c("Actual", "Predicted")
correlation_accuracy <- cor(actual_predicted)
correlation_accuracy
cat("\n","***** ######## ********************","\n")
actual_predicted2 <- data.frame(test_insurance$charges, predict_insurance2)
colnames(actual_predicted2) <- c("Actual", "Predicted")
correlation_accuracy2 <- cor(actual_predicted2)
correlation_accuracy2
#library(DMwR)
regr.eval(actual_predicted$Actual, actual_predicted$Predicted)
plot(x=actual_predicted$Actual, y=actual_predicted$Predicted, xlab ="Actual Charges",ylab = "Predicted Charges", main ="Result of Predicted and Actual",col="blue",pch = 16, cex=1.5)
# Predict charges for new customer : Name- Frank
newData <- data.frame(a=40, b= 1, c=45.50, d=4, e =1, f=3)
colnames(newData) <- colnames(x_test)
frank_Predict <- predict(insurance_model,newData)
cat("Medical Insurance cost of Frank is: ", frank_Predict)
data_function <- function(a, b, c,d,e,f){
testData <- data.frame(col1=c(a),col2=c(b),col3=c(c),col4=c(d),col5=c(e),col6=c(f))
colnames(testData) <- colnames(x_test)
return(testData)
}
# Predict charges for new customer : Name- James
#newData2 <- data_function(40,1,50,4,0,3)
newData2 <- data_function(1,1,20,0,0,1)
#newData2
james_Predict <- predict(insurance_model,newData2)
cat("Medical Insurance cost of James is: ", james_Predict)
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
insuranceDT <- read.csv("insurance.csv")
View(insuranceDT)
str(insuranceDT)
par(mfrow=c(1,3))
# Boxplot to check outliers in smoker status, sex and region based on age
boxplot(insuranceDT$age~insuranceDT$smoker, main="Boxplot of Age against Smoker",xlab ="Smoker", ylab = "Age")
boxplot(insuranceDT$age~insuranceDT$region, main="Boxplot of Age against Region",xlab ="Region", ylab = "Age")
boxplot(insuranceDT$age~insuranceDT$sex, main="Boxplot of Age against Smoker",xlab ="Sex", ylab = "Age")
# Boxplot to check outliers in smoker status, sex and region based on bmi
boxplot(insuranceDT$bmi~insuranceDT$smoker, main="Boxplot of BMI against Smoker",xlab ="Smoker", ylab = "BMI" )
boxplot(insuranceDT$bmi~insuranceDT$region, main="Boxplot of BMI against Region",xlab ="Region",ylab = "BMI" )
boxplot(insuranceDT$bmi~insuranceDT$sex, main="Boxplot of BMI against Smoker",xlab ="Sex", ylab = "BMI" )
# Histogram Plot of continuous variables
hist(insuranceDT$age, main ="Distribution of Ages", ylab = "Frequency",xlab ="Age")
hist(insuranceDT$bmi,main ="Distribution of BMI", ylab = "Frequency",xlab ="BMI")
hist(insuranceDT$charges, main ="Distribution of Charges", ylab = "Frequency",xlab ="Charges")
# Density Plot of continuous variables
plot(density(insuranceDT$age), main="Density Plot: Age", ylab="Frequency", sub=paste("Skewness:", round(e1071::skewness(insuranceDT$age), 2)))  # density plot for 'age'
polygon(density(insuranceDT$age), col="red")
plot(density(insuranceDT$bmi), main="Density Plot: BMI", ylab="Frequency", sub=paste("Skewness:", round(e1071::skewness(insuranceDT$bmi), 2)))  # density plot for 'age'
polygon(density(insuranceDT$bmi), col="red")
plot(density(insuranceDT$charges), main="Density Plot: Charges", ylab="Frequency", sub=paste("Skewness:", round(e1071::skewness(insuranceDT$charges), 2)))  # density plot for 'charges'
polygon(density(insuranceDT$charges), col="red")
polygon(density(insuranceDT$charges), col="red")
polygon(density(insuranceDT$charges), col="red")
rmarkdown::run("InsurrApp.Rmd")
?themeSelector
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
getwd()
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
rmarkdown::run("InsurrApp.Rmd")
